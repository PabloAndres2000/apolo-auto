version: '3.8'

services:
  rabbitmq:
    image: 'rabbitmq:management'
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 10s

  db:
    image: 'postgres:13'
    container_name: postgres
    environment:
      POSTGRES_DB: django_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  client_gateway:
    build:
      context: ./client_gateway
      dockerfile: .docker/Dockerfile
    env_file:
      - ./client_gateway/envs/local.env
    container_name: client_gateway
    command: ['celery', '-A', 'app.celery', 'worker', '--loglevel=info']
    ports:
      - '8000:8000'
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings.base
      - CELERY_BROKER_URL=amqp://user:password@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./client_gateway:/app

  redis:
    image: 'redis:alpine'
    container_name: redis
    networks:
      - app-network

  terraform:
    image: hashicorp/terraform:latest
    volumes:
      - ./terraform:/workspace
    working_dir: /workspace
    entrypoint: ['terraform']
    networks:
      - backend

volumes:
  postgres-data:
    driver: local

networks:
  app-network:
    driver: bridge
  backend:
    driver: bridge
